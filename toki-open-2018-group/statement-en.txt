Group Chat


[Description]

The BitDengklek technical team is in confusion. BitDengklek is an application which can be used to exchange files between its users. Since BitDengklek is still very new, they have not carefully thought about the system yet, such that there are performance problems and the users started to complain.

Currently BitDengklek has N users numbered from 1 to N. These users have exchanged files regularly between one another. This world can be assumed as a two-dimensional plane. The i-th user is located on the (X_i, Y_i) coordinate. The distance of the i-th user and the j-th user is computed with Manhattan distance, which is |X_i - X_j| + |Y_i - Y_j|. BitDengklek team notices that BitDengklek's delay (the time it takes to send a file from the sender to the receiver) directly correlates with the farthest distance of a pair of users. For instance, in the example below, the farthest distance is achieved by the pair of users at position (1, 6) with (12, 5), or (1, 6) with (12, 7), with a distance of 11 + 1 = 12.

[[1.png]]

To reduce the delay, BitDengklek decides to divide its users into two groups. Every user will be in exactly one group. The members of the first group can only exchange files with the members of the first group, and the members of the second group can only exchange files with the members of the second group. The number of members on the two groups can be different. One of the group might also have no member at all.

Indeed, this might not be an ideal solution, but BitDengklek hopes to reduce the farthest distance between two users which can exchange files (i.e. between two users in the same group).

BitDengklek asks you to decide how to divide the users into two groups to satisfy the criteria above. For instance, you can divide the users on the example above into the red group and the blue group as the example below. The delay of this division is 8, which is the distance from (1, 6) to (9, 6), or (4, 9) to (9, 6), or (4, 9) to (6, 3). There is more than one way of dividing the users into two groups, but those ways do not give a farthest distance less than 8.

[[2.png]]


[Task]

You have to implement getMinimumDelay function:

- getMinimumDelay(N, X, Y) - This function will be called exactly once by the grader.
  - N: The number of BitDengklek users.
  - X: A vector with size N. X[i] indicates the value of X_{i + 1}.
  - Y: A vector with size N. Y[i] indicates the value of Y_{i + 1}.
  - This function must return an int indicating the minimum farthest distance of two users in the same group.


[Example]

If given N = 8, X = {1, 4, 9, 12, 12, 9, 9, 6}, Y = {6, 9, 8, 7, 5, 4, 6, 3}, then getMinimumDelay(N, X, Y) function must return 8.

If given N = 5, X = {1, 1, 3, 4, 4}, Y = {2, 5, 4, 1, 2}, then getMinimumDelay(N, X, Y) function must return 4.


[Subtasks]

For every subtask

- 1 ≤ N ≤ 100,000
- 1 ≤ X_i, Y_i ≤ 10^9 for every 1 ≤ i ≤ N

Subtask 1 (5 points)

- 1 ≤ N ≤ 3

Subtask 2 (12 points)

- 1 ≤ N ≤ 16

Subtask 3 (25 points)

- 1 ≤ N ≤ 2,000

Subtask 4 (15 points)

- X_i = X_j for every 1 ≤ i, j ≤ N

Subtask 5 (43 points)

- No additional constraint


[Sample Grader]

The provided sample grader will read the input with the following format:
- The first row consists of an integer N.
- The next N lines consist of two integers separated by space. The i-th line consists of X[i - 1] and Y[i - 1] respectively.

The provided sample grader will print the output with the following format:
- The first line consists of an integer returned by getMinimumDelay function.


[Skeleton]

You can download the skeleton for this problem here.

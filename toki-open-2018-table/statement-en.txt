Exponentiation Table


[Description]

Multiplication table is boring for Mr. Dengklek. He then tries to create an exponentiation table with M rows and N columns. The rows in this table are numbered from 1 to M, and the columns in this table are numbered from 1 to N. In this exponentiation table, the cell on the A-th row and the B-th column, which can be denoted as cell (A, B), consists of an integer A^B. Here is an example of exponentiation table with 5 rows and 6 columns.

[[table.png]]

Mr. Dengklek is feeling lucky and wants to have some fun with the numbers on his exponentiation table. He wants to pick some cells from the exponentiation table, then sums the numbers on the cells. Because Mr. Dengklek is testing his luck, he wants the last two digits of the sum to be 13. Now, he wants to know how many ways to pick the cells from his exponentiation table, such that the last two digits from the sum of the cells is 13. Two ways are considered to be different if there exists a cell picked on one way, but not on the other.

As an additional challenge, some of the cells can't be picked by Mr. Dengklek. Precisely, there are K cells that can't be picked, numbered from 1 to K. The i-th cell that can't be picked by Mr. Dengklek is cell (C_i, D_i). Can you help Mr. Dengklek? Because the answer might be large, you could give the answer in modulo 1,000,000,007.


[Task]

You have to implement countSubsets function:

- countSubsets(M, N, K, C, D) - This function will be called exactly once by the grader.
  - M: The number of rows on Mr. Dengklek's exponentiation table.
  - N: The number of columns on Mr. Dengklek's exponentiation table.
  - K: The number of cells that can't be picked.
  - C: A vector with size K. C[i] indicates the value of C_{i + 1}.
  - D: A vector with size K. D[i] indicates the value of D_{i + 1}.
  - This function must return an int that indicates the number of ways to pick the cells from the exponentiation table, such that the last two digits from the sum of the cells is 13, in modulo 1,000,000,007.


[Example]

If given M = 4, N = 2, K = 0, C = {}, D = {}, then there are 7 ways to pick:
- 1^1 + 1^2 + 2^1 + 3^2 = 1 + 1 + 2 + 9 = 13
- 1^1 + 1^2 + 2^2 + 3^1 + 4^1 = 1 + 1 + 4 + 3 + 4 = 13
- 1^1 + 3^1 + 3^2 = 1 + 3 + 9 = 13
- 1^2 + 3^1 + 3^2 = 1 + 3 + 9 = 13
- 2^1 + 2^2 + 3^1 + 4^1 = 2 + 4 + 3 + 4 = 13
- 2^2 + 3^2 = 4 + 9 = 13
- 3^2 + 4^1 = 9 + 4 = 13
Note that 1 + 3 + 9 is counted twice because the number 1s used are different, which are from cell (1, 1) and (1, 2). Hence, countSubsets(M, N, K, C, D) function must return 7.

If given M = 1, N = 113, K = 0, C = {}, D = {}, then countSubsets(M, N, K, C, D) function must return 306746299.

If given M = 200, N = 500, K = 2, C = {13, 111}, D = {1, 300}, then countSubsets(M, N, K, C, D) function must return 6424837.


[Subtasks]

For every subtask

- 1 ≤ M, N ≤ 10^9
- 0 ≤ K ≤ min(M × N, 100.000)
- 1 ≤ C_i ≤ M
- 1 ≤ D_i ≤ N
- C_i ≠ C_j or D_i ≠ D_j for every 1 ≤ i < j ≤ K

Subtask 1 (11 points)

- 1 ≤ M, N ≤ 4

Subtask 2 (15 points)

- 1 ≤ M, N ≤ 6

Subtask 3 (17 points)

- 1 ≤ M, N ≤ 500

Subtask 4 (26 points)

- 1 ≤ M, N ≤ 4,000

Subtask 5 (31 points)

- No additional constraint


[Sample Grader]

The provided sample grader will read the input with the following format:
- The first row consists of three integers M, N, and K separated by space.
- The next K lines consist of two integers separated by space. The i-th row indicates the value of C[i - 1] and D[i - 1] respectively.

The provided sample grader will print the output with the following format:
- The first line consists of an integer returned by countSubsets function.


[Skeleton]

You can download the skeleton for this problem here.
